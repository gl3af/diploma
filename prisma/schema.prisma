generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Role {
    user
    admin
}

model User {
    id Int @id @default(autoincrement())

    email    String @unique
    password String

    name       String?
    surname    String?
    middlename String?

    age       Int?
    sex       String?
    education String?

    registrationCompleted Boolean @default(false)
    verified              Boolean @default(false)

    role         Role
    workingPlans WorkingPlan[]
}

// TODO: Rework
model Phone {
    id Int @id @default(autoincrement())

    fullName    String
    phoneNumber String @unique

    position   Position?   @relation(fields: [positionId], references: [id], onDelete: Cascade)
    department Department? @relation(fields: [departmentId], references: [id], onDelete: Cascade)

    positionId   Int?
    departmentId Int?
}

// TODO: Rework
model Position {
    id Int @id @default(autoincrement())

    name String

    department   Department? @relation(fields: [departmentId], references: [id], onDelete: Cascade)
    departmentId Int?

    phone Phone[]

    @@unique([name, departmentId])
}

// TODO: Rework
model Department {
    id Int @id @default(autoincrement())

    name String @unique

    positions Position[]
    phones    Phone[]
    workers   Worker[]
}

model Worker {
    id Int @id @default(autoincrement())

    name       String
    surname    String
    middlename String

    position     String
    department   Department @relation(fields: [departmentId], references: [id])
    departmentId Int
}

model Article {
    id Int @id @default(autoincrement())

    name         String  @unique
    shortContent String? @db.Text()
    content      String  @db.Text()

    theme   Theme @relation(fields: [themeId], references: [id], onDelete: Cascade)
    themeId Int

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Theme {
    id Int @id @default(autoincrement())

    name String @unique

    articles Article[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Task {
    id Int @id @default(autoincrement())

    name         String
    description  String
    completed    Boolean  @default(false)
    deadline     DateTime @default(now())
    parentTaskId Int?

    plan   WorkingPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
    planId Int

    parent   Task?  @relation("parentTaskId", fields: [parentTaskId], references: [id], onDelete: Cascade)
    subtasks Task[] @relation("parentTaskId")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model WorkingPlan {
    id Int @id @default(autoincrement())

    name        String
    description String?
    deadline    DateTime

    user   User? @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId Int?

    tasks Task[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
